name: UpdateBuildBase

on:
  workflow_dispatch:
  schedule:
    - cron: "15 23 */3 * *"
  push:
    branches:
      - master
    paths-ignore:
      - "**/LICENSE"
      - "**/README.md"
      - "**/getting_start.sh"
  # pull_request:
  #   branches:
  #     - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "UpdateBuildBase"
  UpdateBuildBase:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set some variables
        run: |
          set -x
          GITHUB_API_BASEURL='https://api.github.com'
          TMP_FILE=$(mktemp)
          if curl -sS -i -I -H "Accept: application/vnd.github.v3+json" -o "$TMP_FILE" -- 'https://github-cache.yingmale.win/api/'; then
            HTTP_STATUS_CODE=$(awk 'NR==1 {print $2}' "$TMP_FILE")
            if [[ $HTTP_STATUS_CODE -ge 200 ]] && [[ $HTTP_STATUS_CODE -le 299 ]]; then
              GITHUB_API_BASEURL='https://github-cache.yingmale.win/api'
              echo "info: github cache is ready, will use ${GITHUB_API_BASEURL} as GITHUB_API_BASEURL."
            fi
          fi
          "rm" -f "$TMP_FILE"

          echo "GITHUB_API_BASEURL=${GITHUB_API_BASEURL}" >> $GITHUB_ENV
          #   echo "bashrc_latest_commit_hash=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
          #           "${GITHUB_API_BASEURL}/repos/IceCodeNew/myrc/commits?per_page=1&path=.bashrc" |
          #           grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          #   echo "cmake_latest_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
          #           "${GITHUB_API_BASEURL}/repos/Kitware/CMake/tags?per_page=100" |
          #           grep -F 'name' | cut -d'"' -f4 | grep -vE 'alpha|beta|rc|test|week' |
          #           sort -Vr | head -n 1)" >> $GITHUB_ENV
          #   echo "ninja_latest_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
          #           "${GITHUB_API_BASEURL}/repos/ninja-build/ninja/releases/latest" |
          #           grep -F 'tag_name' | cut -d'"' -f4)" >> $GITHUB_ENV
          #   echo "netbsd_curses_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
          #           "${GITHUB_API_BASEURL}/repos/sabotage-linux/netbsd-curses/releases/latest" |
          #           grep -F 'tag_name' | cut -d'"' -f4 | sed -E 's/^v//')" >> $GITHUB_ENV
          #   echo "gettext_tiny_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
          #           "${GITHUB_API_BASEURL}/repos/sabotage-linux/gettext-tiny/releases/latest" |
          #           grep -F 'tag_name' | cut -d'"' -f4 | sed -E 's/^v//')" >> $GITHUB_ENV
          #   echo "openssl_latest_tag_name=$(curl -sSL \
          #           'https://raw.githubusercontent.com/openssl/openssl/OpenSSL_1_1_1-stable/README' |
          #           grep -Eo '1.1.1.*')" >> $GITHUB_ENV
          #   echo "parallel_version=$(curl -sSL \
          #           "https://ftpmirror.gnu.org/parallel/" | tr -d '\r\n\t' |
          #           grep -Po '(?<=parallel-)[0-9]+(?=\.tar\.bz2)' | sort -Vr | head -n 1)" >> $GITHUB_ENV
          #   echo "boost_version=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
          #         "${GITHUB_API_BASEURL}/repos/boostorg/boost/tags?per_page=32" |
          #         grep 'name' | cut -d\" -f4 | grep -vE 'alpha|beta|rc|test|week' |
          #         sed 's/boost-//' | sort -Vr | head -n 1)" >> $GITHUB_ENV
          echo "RELEASE_NAME=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
          echo "libtorrent_latest_commit_hash=$(curl -sL -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/arvidn/libtorrent/commits?sha=RC_1_2&per_page=1" |
                grep -Fm1 'sha' | cut -d'"' -f4)" >> $GITHUB_ENV
          echo "qt_full_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/qt/qtbase/tags?per_page=100" |
                grep 'name' | cut -d\" -f4 | grep -vE 'alpha|beta|rc|test|week' |
                grep -E '^v6' | sort -Vr | head -n 1)" >> $GITHUB_ENV
          echo "qt_minor_tag_name=$(curl -sSL --fail --retry 5 --retry-delay 10 --retry-max-time 60 -H 'Accept: application/vnd.github.v3+json' \
                "${GITHUB_API_BASEURL}/repos/qt/qtbase/tags?per_page=100" |
                grep 'name' | cut -d\" -f4 | grep -vE 'alpha|beta|rc|test|week' |
                grep -E '^v6' | sort -Vr | head -n 1 |
                grep -Po '(?<=v)[0-9]+\.[0-9]+(?=\.)')" >> $GITHUB_ENV
          echo "image_build_date=$(TZ=':Asia/Taipei' date +%F)" >> $GITHUB_ENV
          set +x
        shell: bash
      # Runs a set of commands using the runners shell
      - name: Force push `build_base` branch
        run: |
          git config --local user.name "actions"
          git config --local user.email "action@github.com"
          git checkout build_base
          git reset --hard origin/master
          sed -i -E "s/^ENV image_build_date=[^\ ]+/ENV image_build_date=${image_build_date:?empty value}/" qbee_alpine_build_base.Dockerfile
          # sed -i -E "s/^ARG bashrc_latest_commit_hash=.+/ARG bashrc_latest_commit_hash=${bashrc_latest_commit_hash:?empty value}/" qbee_alpine_build_base.Dockerfile
          # sed -i -E "s/^ARG cmake_latest_tag_name=.+/ARG cmake_latest_tag_name=${cmake_latest_tag_name:?empty value}/" qbee_alpine_build_base.Dockerfile
          # sed -i -E "s/^ARG ninja_latest_tag_name=.+/ARG ninja_latest_tag_name=${ninja_latest_tag_name:?empty value}/" qbee_alpine_build_base.Dockerfile
          # sed -i -E "s/^ARG netbsd_curses_tag_name=.+/ARG netbsd_curses_tag_name=${netbsd_curses_tag_name:?empty value}/" qbee_alpine_build_base.Dockerfile
          # sed -i -E "s/^ARG gettext_tiny_tag_name=.+/ARG gettext_tiny_tag_name=${gettext_tiny_tag_name:?empty value}/" qbee_alpine_build_base.Dockerfile
          # sed -i -E "s/^ARG openssl_latest_tag_name=.+/ARG openssl_latest_tag_name=${openssl_latest_tag_name:?empty value}/" qbee_alpine_build_base.Dockerfile
          # sed -i -E "s/^ARG parallel_version=.+/ARG parallel_version=${parallel_version:?empty value}/" qbee_alpine_build_base.Dockerfile
          # sed -i -E "s/^ENV boost_version=[^\ ]+/ENV boost_version=${boost_version:?empty value}/" qbee_alpine_build_base.Dockerfile
          sed -i -E "s/^ENV libtorrent_latest_commit_hash=.+/ENV libtorrent_latest_commit_hash=${libtorrent_latest_commit_hash:?empty value}/" qbee_alpine_build_base.Dockerfile
          sed -i -E "s/^ENV qt_full_tag_name=.+/ENV qt_full_tag_name=${qt_full_tag_name:?empty value}/" qbee_alpine_build_base.Dockerfile
          sed -i -E "s/^ENV qt_minor_tag_name=.+/ENV qt_minor_tag_name=${qt_minor_tag_name:?empty value}/" qbee_alpine_build_base.Dockerfile
          git add qbee_alpine_build_base.Dockerfile
          git rm release.Dockerfile qbee.Dockerfile
          git rm -r .github
          git commit -m "${{ env.RELEASE_NAME }}"
          git push -f -u origin build_base
